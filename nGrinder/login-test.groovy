import static net.grinder.script.Grinder.grinder
import static org.junit.Assert.*
import static org.hamcrest.Matchers.*
import net.grinder.script.GTest
import net.grinder.script.Grinder
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
import static net.grinder.util.GrinderUtils.* // You can use this if you're using nGrinder after 3.2.3
import org.junit.Before
import org.junit.BeforeClass
import org.junit.Test
import org.junit.runner.RunWith

import org.ngrinder.http.HTTPRequest
import org.ngrinder.http.HTTPRequestControl
import org.ngrinder.http.HTTPResponse
import org.ngrinder.http.cookie.Cookie
import org.ngrinder.http.cookie.CookieManager

import HTTPClient.NVPair
import org.apache.hc.core5.http2.HttpVersionPolicy
import org.apache.hc.core5.http.Header
//import static java.util.Collections.emptyList

/**
* A simple example using the HTTP plugin that shows the retrieval of a single page via HTTP.
*
* This script is automatically generated by ngrinder.
*
* @author Sukmoon Lee
*/
@RunWith(GrinderRunner)
class TestRunner {

	public static GTest test
	public static HTTPRequest request
	public static Map<String, String> headers = [:]
	public static Map<String, Object> params = [:]
	public static List<Cookie> cookies = []
	public static int debug = 1;

	@BeforeProcess
	public static void beforeProcess() {
		HTTPRequestControl.setConnectionTimeout(300000)
		test = new GTest(1, "login test")
		request = new HTTPRequest()

		request.setVersionPolicy(HttpVersionPolicy.FORCE_HTTP_1);
		//request.setVersionPolicy(HttpVersionPolicy.FORCE_HTTP_2);
		//request.setVersionPolicy(HttpVersionPolicy.NEGOTIATE);

		grinder.logger.info("before process.")
	}

	@BeforeThread
	public void beforeThread() {
		test.record(this, "test")
		grinder.statistics.delayReports = true

		// do login & save to the login info in cookies
		NVPair[] login_params = [new NVPair("id", "MY_ID"), new NVPair("pw", "MY_PASSWORD")];
		HTTPResponse res = request.POST("https://login.site.com/login/do", login_params);
		cookies = CookieManager.getCookies()

		grinder.logger.info("before thread.")
	}

	@Before
	public void before() {
		request.setHeaders(headers)
		CookieManager.addCookies(cookies)

		grinder.logger.info("before. init headers and cookies")
	}

	@Test
	public void test() {
		HTTPResponse response = request.GET("http://my.site.com")

		if (debug == 1) {
			grinder.logger.info("getStatusCode = " + response.getStatusCode());

			List<Header> hdrs = response.getHeaders();
			grinder.logger.info("Header len = " + hdrs.size())
			for (Header hdr : hdrs) {
				grinder.logger.info("   " + hdr.getName() + " : " + hdr.getValue());
			}

			grinder.logger.info("getBodyText.size() = " + response.getBodyText().size());
			if (response.getBodyText().size()>100) {
				grinder.logger.info("getBodyText(~100) = " + response.getBodyText().substring(0,100));
			} else if (response.getBodyText().size()!=0) {
				grinder.logger.info("getBodyText = " + response.getBodyText());
			}
		}

		if (response.statusCode == 301 || response.statusCode == 302) {
			grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", response.statusCode)
		} else {
			assertThat(response.statusCode, is(200))
		}
	}
}
